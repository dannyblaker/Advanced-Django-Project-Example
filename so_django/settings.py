"""
Django settings for so_django project.

Generated by 'django-admin startproject' using Django 3.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""
import csv
import os
import json
from dotenv import load_dotenv
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

env_path = os.path.join(BASE_DIR, '.env')
load_dotenv(dotenv_path=env_path)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")
ENVIRONMENT = os.getenv("ENVIRONMENT")
print(ENVIRONMENT)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# ALLOWED_HOSTS = ['54.66.109.85','127.0.0.1']
ALLOWED_HOSTS = ['*']
SECURE_REFERRER_POLICY = 'unsafe-url'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'horizon.apps.HorizonConfig',
    'geoip2',
    'geoip2_extras',
    'django.contrib.sitemaps',
    'django.contrib.sites'
]

SITE_ID = 1
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'geoip2_extras.middleware.GeoIP2Middleware',
    'lockdown.middleware.LockdownMiddleware',
]


GEOIP_PATH = os.path.dirname(os.path.join(BASE_DIR, 'GeoLite2-Country.mmdb'))

ROOT_URLCONF = 'so_django.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'so_django.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

#----
if ENVIRONMENT == "STAGING":

    STATIC_URL = '/static/'
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
    LOCKDOWN_ENABLED = True


elif ENVIRONMENT == "PRODUCTION":

    STATIC_URL = '/static/'
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
    LOCKDOWN_ENABLED = False

else:
    # local dev
    STATIC_URL = '/static/'
    STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
    LOCKDOWN_ENABLED = False

with open(os.path.join(BASE_DIR, 'config.json'), 'rb') as file:
    json_data = json.load(file)

USER_REGISTRATION_API_KEY = json_data['user_registration_api_key']
USER_REGISTER_ENDPOINT = json_data["user_registration_endpoint"]
MAILCHIMP_API_KEY = json_data["mailchimp_api_key"]
MAILCHIMP_USERNAME = json_data["mailchimp_username"]
RECAPTCHA_SITE_KEY = json_data["recaptcha_test_site_key"]
RECAPTCHA_SECRET = json_data["recaptcha_test_secret_key"]
ENABLE_RECAPTCHA = False

SITE_LOCKDOWN_PASSWORD = json_data["lockdown_password"]
LOCKDOWN_PASSWORDS = (SITE_LOCKDOWN_PASSWORD)

BLACKLISTED_DOMAINS = []

with open(os.path.join(BASE_DIR, 'competitor_domains.csv'), newline='', encoding='utf-8') as csvfile:
    reader = csv.DictReader(csvfile)
    for row in reader:
        BLACKLISTED_DOMAINS.append(row['domain'])

FREE_DOMAINS = []

with open(os.path.join(BASE_DIR, 'free_domains.csv'), newline='', encoding='utf-8') as csvfile:
    reader = csv.DictReader(csvfile)
    for row in reader:
        FREE_DOMAINS.append(row['domain'])

SOFT_BLOCK_COUNTRIES = []
HARD_BLOCK_COUNTRIES = []

with open(os.path.join(BASE_DIR, 'block countries by IP - (all IPv4 Ranges).csv'), newline='', encoding='utf-8') as csvfile:
    reader = csv.DictReader(csvfile)
    for row in reader:
        if row['softblock'] == "Y":
            if row['country_iso_code'] not in SOFT_BLOCK_COUNTRIES:
                SOFT_BLOCK_COUNTRIES.append(row['country_iso_code'])
            if row['continent_code'] not in SOFT_BLOCK_COUNTRIES:
                SOFT_BLOCK_COUNTRIES.append(row['continent_code'])

        elif row['hardblock'] == "Y":
            if row['country_iso_code'] not in HARD_BLOCK_COUNTRIES:
                HARD_BLOCK_COUNTRIES.append(row['country_iso_code'])
        else:
            pass
        
print(SOFT_BLOCK_COUNTRIES)
print(len(SOFT_BLOCK_COUNTRIES))

LOGGING_LOCAL_PATH_CUSTOM = os.path.dirname(os.path.join(BASE_DIR, 'debug.log'))
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': 'debug.log',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'ERROR',
            'propagate': True,
        },
    },
}